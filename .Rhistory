library(AppliedPredictiveModeling)
library(caret)
data(AlzheimerDisease)
install(caret)
package(caret)
install.packages("caret")
install.packages("AppliedPredictiveModeling")
library(AppliedPredictiveModeling)
library(caret)
data(AlzheimerDisease)
diagnosis
adData=data.frame(diagnosis,predictors)
trainIndex = createDataPartition(diagnosis,p=0.5, list=False)
adData=data.frame(diagnosis,predictors)
trainIndex = createDataPartition(diagnosis,p=0.5, list=F)
trainIndex
length(trainIndex)
training <- adData[trainIndex,]
test <- adData[-trainIndex,]
length(training)
length(test)
length(adData)
nrow(test)
nrow(training)
nrow(adData)
trainIndex = createDataPartition(diagnosis,p=0.50, list=F)
trainIndex
trainIndex = createDataPartition(diagnosis,p=0.50, list=FALSE)
trainIndex = createDataPartition(diagnosis,p=0.50)
training <- adData[trainIndex,]
test <- adData[-trainIndex,]
trainIndex
trainIndex$Resample1
x <- 1:10
if(x > 5) {
x <- 0
}
x
if (x>5) { x<-0}
if (x<5) { x<-0}
x
f <- function(x) {
g <- function(y) {
y + z
}
z <- 4
x + g(x)
}
z <- 10
f(3)
z
## Put comments here that give an overall description of what your
## functions do
## Write a short comment describing this function
makeCacheMatrix <- function(x = matrix()) {
inverse <- NULL
set <- function(y){
inverse <<-NULL
x<<-y
}
get <- function() x
setInverse <- function(inv) inverse <<- inv
getInverse <- function() inverse
list(set=set,get=get,setInverse=setInverse,getInverse=getInverse)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
}
makeCacheMatrix([1,2,3])
makeCacheMatrix(Matrix([1,2,3]))
Matrix
matrix
matrix([1,2,3])
matrix([c(1,2,3))
matrix(c(1,2,3))
matrix(c(1,2,3),c(4,5,6),c(7,8,9))
matrix(c(c(1,2,3),c(4,5,6),c(7,8,9))
;
matrix(c(c(1,2,3),c(4,5,6),c(7,8,9)))
matrix(c(1,2,3),c(4,5,6),c(7,8,9))
matrix(2,3)
matrix(2,3,3)
matrix(c(1,2),3,3)
matrix(c(1,2),4,4)
matrix(range(1,9),3,3)
matrix(range(1,9),3)
range(1,9)
1:9
matrix(1:9,3)
t<-matrix(1:9,3)
inv(t)
inverse(t)
t.inverse
t
?inverse
?inv
t^-1
solve(t)
t
disc(t)
discriminant(t)
diag(t)
t<- matrix(c(1,0,0,0),3,3)
t
solve(t)
t<- matrix(c(1,0,0,1),3,3)
t
solve(t)
t
t<- makeCacheMatrix(t)
t
t$get
t$get()
t
t$get
t$get()
t
mat = matrix(c(1,0,0,1),3,3)
mat
t<-makeCacheMatrix(mat)
t
mat
t$get()
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
inv <- x$getInverse()
if (!is.null(inv)){
message("getting cached data")
return(inv)
}
data <- x$get()
inv<- solve(data,...)
x$setInverse(inv)
inv
}
}
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
inv <- x$getInverse()
if (!is.null(inv)){
message("getting cached data")
return(inv)
}
data <- x$get()
inv<- solve(data,...)
x$setInverse(inv)
inv
}
cacheSolve(t)
cacheSolve(t)
t$set(matrix(c(1,2,3),3,3))
cacheSolve(t)
t$set(matrix(c(1,2,3,4),3,3))
cacheSolve(t)
cacheSolve(t)
mat
cacheSolve(mat)
environment(t)
t
environment(t$getInverse)
arguments(t$getInverse)
(t$getInverse)
f<-gl(3,10)
f
library(datasets)
data(iris)
iris
mean(iris$Sepal.Length)
iris$Sepal.Length
summary(iris)
rowMeans(iris[,1:4])
apply(iris[,1:4],2,mean)
library(datasets)
data(mtcars)
split(mtcars,mtcars$cyl)
sapply(split(mtcars$mpg,mtcars$cyl),mean)
sapply(split(mtcars$mpg,mtcars$cyl),mean)$4
sapply(split(mtcars$mpg,mtcars$cyl),mean)[[4]]
sapply(split(mtcars$mpg,mtcars$cyl),mean)[[0]]
sapply(split(mtcars$mpg,mtcars$cyl),mean)[0]
sapply(split(mtcars$mpg,mtcars$cyl),mean)[1]
split(mtcars,mtcars$cyl)
split(mtcars$hp,mtcars$cyl)
sapply(split(mtcars$hp,mtcars$cyl),mean)
a<-sapply(split(mtcars$hp,mtcars$cyl),mean)
a[1]
a[3]-a[1]
debug(ls)
ls
?ls
ls('hi')
ls
debug(ls)
ls
ls
?ls
ls()
debug(ls)
ls()
ls()
ls
ls()
ls
?debug
colmeans(iris)
colMeans(iris)
stop
stop()
ls
step()
iris
iris[iris$species=="virginica"]
iris[iris$species="virginica"]
iris[iris$species=="virginica",]
iris
iris$species
iris$specie
iris$species
iris$Species
iris$Species="virginica"
data(iris)
iris$Species=="virginica"
iris[iris$Species=="virginica",[]]
iris[iris$Species=="virginica",
]
iris[iris$Species=="virginica", Sepal.Length]
iris[iris$Species=="virginica", ]$Sepal.Length
mean(iris[iris$Species=="virginica", ]$Sepal.Length)
clear
clear()
library(AppliedPredictiveModeling)
library(caret)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
trainIndex=createDataPartition(diagnosis,p=0.5)
training=adData[trainIndex]
trainIndex
trainIndex=createDataPartition(diagnosis,p=0.5,list=FALSE)
trainIndex
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
set.seed(975)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
training
head(training)
training[1]
training
trainIndex
?plot
plot(trainIndex,training$CompressiveStrengt)
plot(trainIndex,training$CompressiveStrength)
length(trainIndex)
length(training)
training
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
len(training)
length(training)
length(training$CompressiveStrength)
inTrain
plot(inTrain,training$CompressiveStrength)
set.seed(975)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
plot(inTrain,training$CompressiveStrength)
training[,-c(CompressiveStrength)]
training[,-c("CompressiveStrength")]
training[,-[9]]
training[,-c(9)
]
head(training[,-c(9)])
featurePlot(x=training[,-c(9)],y=training[,9],plot="pairs")
plot(inTrain,training$CompressiveStrength)
qplot(inTrain,training$CompressiveStrength)
qplot(inTrain,training$CompressiveStrength,colour=Cement)
training
head(training)
training[1]
training[,1]
training[1,1]
training
head(training)
training[23,]
training$Index
training$index
index(training)
?plot
?qplot
qplot(x=inTrain,y=training[,9],color=training[,1])
qplot(x=inTrain,y=training[,9],color=training[,2])
qplot(x=inTrain,y=training[,9],color=training[,3])
qplot(x=inTrain,y=training[,9],color=training[,4])
qplot(x=inTrain,y=training[,9],color=training[,5])
qplot(x=inTrain,y=training[,9],color=training[,6])
qplot(x=inTrain,y=training[,9],color=training[,7])
qplot(x=inTrain,y=training[,9],color=training[,8])
qplot(x=inTrain,y=training[,9],color=training[,9])
qplot(x=inTrain,y=training[,9],color=training[,1])
qplot(x=inTrain,y=training[,9],color=training[1])
qplot(x=inTrain,y=training[,9],color=training[1,])
qplot(x=inTrain,y=training[,9],color=training[,1])
qplot(x=inTrain,y=training$CompressiveStrength,color=training[,1])
qplot(x=inTrain,y=training$CompressiveStrength,color=training$FlyAsh)
training$FlyAsh
?cut2
package(hmisc)
library(hmisc)
install.packages("hmisc")
install.packages("Hmisc")
library(Hmisc)
?cut2
?cut
cut2(training$FlyAsh)
qplot(x=inTrain,y=training$CompressiveStrength,color=cut2(training$FlyAsh)
)
qplot(x=inTrain,y=training$CompressiveStrength,color=cut2(training$Age))
training$SuperPlasticizer
training
training$Superplasticizer
?par
par("pch")
?postscript
?windows
?xfig
?read.txt
?read
?read.csv
setwd("~/workspace/R stuff/ExData_Plotting1")
read.table('household_power_consumption.txt');
read.table('household_power_consumption.txt',header=TRUE,sep=";");
data<-read.table('household_power_consumption.txt',header=TRUE,sep=";");
data
length(data)
length(data$1)
length(data$Date)
head(data)
data<-read.table('household_power_consumption.txt',header=TRUE,sep=";",na.strings='?');
data = data[,data$Date>01/02/2007]
data$Date = as.Date(data$Date)
head(data)
data[1,1]
data<-read.table('household_power_consumption.txt',header=TRUE,sep=";",na.strings='?');
data = data[,data$Date>01/02/2007]
?as.Date
as.Date(data$Date,format="dd/mm/yyyy ")
as.Date(data$Date,format="dd/mm/yyyy")
as.Date(data$Date)
?strptime
?as.Date
as.Date(data$Date,format="%d/%m/%Y")
data<-read.table('household_power_consumption.txt',header=TRUE,sep=";",na.strings='?');
data$Date = as.Date(data$Date,format="%d/%m/%Y")
data = data[data$Date>="2007/02/1" & data$Date <="2007/02/02",]
hist(data$Global_active_power)
?hist
?plot
?hist
?par
hist(data$Global_active_power,col="red")
hist(data$Global_active_power,col="red",xlab="Global Active Power (kilowatts)",title="Global Active Power")
hist(data$Global_active_power,col="red",xlab="Global Active Power (kilowatts)",main="Global Active Power")
hist(data$Global_active_power,col="red",xlab="Global Active Power (kilowatts)",main="Global Active Power")
hist(data$Global_active_power,col="red",xlab="Global Active Power (kilowatts)",main="Global Active Power")
png("plot1.png")
hist(data$Global_active_power,col="red",xlab="Global Active Power (kilowatts)",main="Global Active Power")
dev.off()
data<-read.table('household_power_consumption.txt',header=TRUE,sep=";",na.strings='?');
data$Date = as.Date(data$Date,format="%d/%m/%Y")
data = data[data$Date>="2007/02/1" & data$Date <="2007/02/02",]
png("plot1.png")
hist(data$Global_active_power,col="red",xlab="Global Active Power (kilowatts)",main="Global Active Power")
dev.off()
plot(data$Global_active_power,col="red",xlab="Global Active Power (kilowatts)",main="Global Active Power")
plot(data$Global_active_power,xlab="Global Active Power (kilowatts)",main="Global Active Power")
plot(data$Global_active_power~ data$Time,xlab="Global Active Power (kilowatts)",main="Global Active Power")
data$newTime= strptime(data$Time)
data$newTime= strptime(data$Time,format="%h:%m%s")
data$newTime= strptime(data$Time,format="hh:mm:ss")
?strptime
data$newTime= strptime(data$Time,format="%H:%M:%S")
tail(data$newTime)
head(data$newTime)
length(data$newTime)
data$newTime[1440:,]
data$newTime[1440:2880,]
data$newTime[1440,]
data$newTime[1440]
data$newTime[1440:]
data$newTime[1440:2880]
data$newTime[1440:2880]+1
data$newTime[1440:2880]+24:00:00
data$newTime[1440:2880]+"24:00:00"
data$newTime[1440:2880]+24*60*60
data$dateTime= data$Date+data$Time
data<-read.table('household_power_consumption.txt',header=TRUE,sep=";",na.strings='?');
data$Datetime <- as.POSIXct(paste(data$Date,data$Time))
data$Date = as.Date(data$Date,format="%d/%m/%Y")
data = data[data$Date>="2007/02/1" & data$Date <="2007/02/02",]
data$Datetime <- as.POSIXct(paste(data$Date,data$Time),format ="%Y-%m-%d %H:%M:%S")
tail(data)
head(data)
plot(data$Global_Active_Power ~ data$Datetime)
plot(data$Global_active_power ~ data$Datetime)
?lines
lines(data$Global_active_power, data$Datetime)
lines(data$Global_active_power, data$Datetime)
lines(data$Global_active_power, data$Datetime)
plot()
hist()
hist(data$Datetime)
hist(data$Global_active_pwoer)
hist(data$Global_active_power)
lines(data$Global_active_power, data$Datetime)
plot
?plot
plot(data$Global_active_power, data$Time,xlab="Global Active Power (kilowatts)",main="Global Active Power")
?plot
plot(data$Global_active_power, data$Time,xlab="Global Active Power (kilowatts)",main="Global Active Power",type="l")
plot(data$Global_active_power ~ data$Datetime, type="l")
plot(data$Global_active_power ~ data$Datetime, type="l",ylab="Global Active Power (kilowatts)")
plot(data$Global_active_power ~ data$Datetime, type="l",ylab="Global Active Power (kilowatts)",xlab="")
plot(data$Global_active_power ~ data$Datetime, type="l")
?plot
?png
data<-read.table('household_power_consumption.txt',header=TRUE,sep=";",na.strings='?');
data$Date = as.Date(data$Date,format="%d/%m/%Y")
data = data[data$Date>="2007/02/1" & data$Date <="2007/02/02",]
data$Datetime <- as.POSIXct(paste(data$Date,data$Time),format ="%Y-%m-%d %H:%M:%S")
png("plot2.png")
plot(data$Global_active_power ~ data$Datetime, type="l",ylab="Global Active Power (kilowatts)",xlab="")
dev.off()
plot(data$Sub_metering_1 ~ data$Datetime, type="l",ylab="Global Active Power (kilowatts)",xlab="")
plot(data$Sub_metering_2 ~ data$Datetime, type="l",ylab="Global Active Power (kilowatts)",xlab="",col="red")
plot(data$Sub_metering_1 ~ data$Datetime, type="l",ylab="Global Active Power (kilowatts)",xlab="")
lines(data$Sub_metering_2 ~ data$Datetime, type="l",ylab="Global Active Power (kilowatts)",xlab="",col="red")
lines(data$Sub_metering_3 ~ data$Datetime, type="l",ylab="Global Active Power (kilowatts)",xlab="",col="blue")
data<-read.table('household_power_consumption.txt',header=TRUE,sep=";",na.strings='?');
data$Date = as.Date(data$Date,format="%d/%m/%Y")
data = data[data$Date>="2007/02/1" & data$Date <="2007/02/02",]
data$Datetime <- as.POSIXct(paste(data$Date,data$Time),format ="%Y-%m-%d %H:%M:%S")
png("plot3.png")
plot(data$Sub_metering_1 ~ data$Datetime, type="l",ylab="Global Active Power (kilowatts)",xlab="")
lines(data$Sub_metering_2 ~ data$Datetime, type="l",ylab="Global Active Power (kilowatts)",xlab="",col="red")
lines(data$Sub_metering_3 ~ data$Datetime, type="l",ylab="Global Active Power (kilowatts)",xlab="",col="blue")
dev.off()
data<-read.table('household_power_consumption.txt',header=TRUE,sep=";",na.strings='?');
data$Date = as.Date(data$Date,format="%d/%m/%Y")
data = data[data$Date>="2007/02/1" & data$Date <="2007/02/02",]
data$Datetime <- as.POSIXct(paste(data$Date,data$Time),format ="%Y-%m-%d %H:%M:%S")
png("plot3.png")
plot(data$Sub_metering_1 ~ data$Datetime, type="l",ylab="Energy sub metering",xlab="")
lines(data$Sub_metering_2 ~ data$Datetime, type="l",xlab="",col="red")
lines(data$Sub_metering_3 ~ data$Datetime, type="l",xlab="",col="blue")
dev.off()
?legend
legend("top","right")
legend("top",y="right")
legend("top",y="right","yo")
